type AnswerDTO {
    answerValue: String
}
input AnswerDTOInput {
    answerValue: String
}

type QuestionDTO{
    questionValue: String,
    answerDTOS: [AnswerDTO!]
}
input QuestionDTOInput{
    questionValue: String,
    answerDTOS: [AnswerDTOInput!]
}

type ChosenAnswerDTO{
    questionDTO: QuestionDTO,
    answerDTOS: [AnswerDTO]
}

type SurveyDTO{
    name: String,
    questionDTOS: [QuestionDTO!]
}
input SurveyDTOInput{
    name: String,
    questionDTOS: [QuestionDTOInput!]
}

type UserSurveyDTO{
    survey: SurveyDTO,
    chosenAnswersDTOS: [ChosenAnswerDTO!]
}

type Query{
    getQuestions: [QuestionDTO!]
    getAnswers: [AnswerDTO!]
    getSurveyByName(name: String!): SurveyDTO
    getUserSurveyById(id: ID!): UserSurveyDTO
}

type Mutation {
    createAnswer(answer: AnswerDTOInput!): AnswerDTO
    createQuestion(question: QuestionDTOInput!): QuestionDTO
    createSurvey(survey: SurveyDTOInput!): SurveyDTO
}