type AnswerDTO {
    value: String
}
input AnswerDTOInput {
    value: String
}

type QuestionDTO{
    value: String,
    answerDTOS: [AnswerDTO!]
}
input QuestionDTOInput{
    value: String,
    answerDTOS: [AnswerDTOInput!]
}

type ChosenAnswerDTO{
    questionDTO: QuestionDTO,
    answerDTOS: [AnswerDTO]
#    userSurveyDTO: [UserSurveyDTO]
}

type SurveyDTO{
    name: String,
    questionDTOS: [QuestionDTO!]
}

type UserSurveyDTO{
    survey: SurveyDTO,
    chosenAnswersDTOS: [ChosenAnswerDTO!]
}

type Query{
    getQuestions: [QuestionDTO!]
    getAnswers: [AnswerDTO!]
    getSurveyByName(name: String!): SurveyDTO
    getUserSurveyById(id: ID!): UserSurveyDTO
#    getChosenAnswersByUserSurvey(userSurveyId: ID!): [ChosenAnswerDTO]
#    getSurveys: [Survey!]
#    getSurveyByName(name: String): Survey
}

type Mutation {
    createAnswer(answer: AnswerDTOInput!): AnswerDTO
    createQuestion(question: QuestionDTOInput!): QuestionDTO
}